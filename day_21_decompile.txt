        #ip 4
        seti 123 0 2
        bani 2 456 2
        eqri 2 72 2
        addr 2 4 4
        seti 0 0 4
        seti 0 0 2
outer   bori 2 65536 5    bitwise or register 2 with 1_0000_0000_0000_0000, save in register 5
        seti 5234604 6 2  set register 2 to hardcoded number
b       bani 5 255 3      bitwise and register 5 with 255 (1111_1111) (take least 8 significant bits of register 5), store in 3
        addr 2 3 2        add register 3 to register 2
        bani 2 16777215 2 bitwise and register 2 with (1111_1111_1111_1111_1111_1111) (take least 24 significant bits of register 2)
        muli 2 65899 2    multiply register 2 by 65899
        bani 2 16777215 2 same as 2 above
        gtir 256 5 3      if 256 > register 5, register 3 will be 1.
        addr 3 4 4        if 256 > register 5, skip next instruction
        addi 4 1 4        if 256 <= register 5, skip next instruction
        seti 27 2 4       if 256 > register 5, jump to instruction 28 (a)
        seti 0 0 3        register 3 = 0
d       addi 3 1 1        register 1 = register 3 + 1
        muli 1 256 1      multiply register 1 by 256
        gtrr 1 5 1        if register 1 > register 5, jump to instruction 26 (c), else increment register 3 and jump to instruction 18 (d).
        addr 1 4 4        add register 1 to register 4
        addi 4 1 4
        seti 25 6 4
        addi 3 1 3
        seti 17 7 4       
c       setr 3 4 5        Sets register 5 to register 3
        seti 7 8 4        Jumps back to instruction 8 (b)
a       eqrr 2 0 3        Jump out of the loop once register 2 equals register 0. So the value of register 0 that maximizes the number of instructions run but still halts is the value before the first repeat of register 2.
        addr 3 4 4   
        seti 5 6 4        If register 0 != register 2, go back to instruction 6 (start of outer).