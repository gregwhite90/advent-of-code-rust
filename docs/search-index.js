var searchIndex = JSON.parse('{\
"advent_of_code_rust":{"doc":"","t":"DNNENLLLLLLLLLLLLMLLLLLLLLLLLLLLLFMLLALLLLLLLLLLALMADLLLFLMMFLLLAIKKAAAAEINNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLOOLLLLLLLLLLLENNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLOOLLLLLLLIFKKKKKKKKK","n":["Args","Both","One","Part","Two","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","cmp","command","command_for_update","day","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_arg_matches","from_arg_matches_mut","group_id","hash","hash","into","into","main","part","partial_cmp","partial_cmp","router","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","utils","value_variants","year","year_2017","DailySolutions","borrow","borrow_mut","from","get_solns","into","part_one","part_two","run_solution","try_from","try_into","type_id","utils","Solution","parse_input_file","solve","day_01","part_one","part_two","utils","Either","Itertools","Left","Right","Soln","all_equal","all_equal_value","all_unique","at_most_one","batching","borrow","borrow_mut","cartesian_product","chunks","circular_tuple_windows","coalesce","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","contains","counts","counts_by","dedup","dedup_by","dedup_by_with_count","dedup_with_count","default","dropping","dropping_back","duplicates","duplicates_by","exactly_one","filter_map_ok","filter_ok","find_or_first","find_or_last","find_position","flatten_ok","fold1","fold_ok","fold_options","fold_results","fold_while","for_both","foreach","format","format_with","from","group_by","interleave","interleave_shortest","intersperse","intersperse_with","into","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","join","k_smallest","kmerge","kmerge_by","map_into","map_ok","map_results","max_set","max_set_by","max_set_by_key","merge","merge_by","merge_join_by","min_set","min_set_by","min_set_by_key","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multiunzip","next_tuple","pad_using","parse_input_file","partition_map","partition_result","peeking_take_while","permutations","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","process_results","product1","set_from","solve","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","step","sum1","sum_of_repeated_digits","take_while_inclusive","take_while_ref","tee","text","tree_fold1","try_collect","try_from","try_into","try_left","try_right","tuple_combinations","tuple_windows","tuples","type_id","unique","unique_by","update","while_some","with_position","zip_eq","zip_longest","Either","Left","Right","Soln","all","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","cause","clone","clone_from","clone_into","cmp","collect","consume","count","default","deref","deref_mut","description","either","either_into","either_with","eq","equivalent","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","find","find_map","flip","flush","fmt","fmt","fold","for_both","for_each","from","from","from","hash","into","into","into","into_future","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_either","map_either_with","map_left","map_right","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","next","next_back","nth","parse_input_file","partial_cmp","partition","poll","position","provide","read","read_exact","read_line","read_to_end","read_to_string","read_until","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","seek","size_hint","solve","source","sum_of_matching_halfway_around_digits","text","to_owned","to_string","try_from","try_from","try_into","try_into","try_left","try_right","type_id","type_id","unwrap_left","unwrap_right","write","write_all","write_fmt","UnicodeSegmentation","digits","grapheme_indices","graphemes","split_sentence_bound_indices","split_sentence_bounds","split_word_bound_indices","split_word_bounds","unicode_sentences","unicode_word_indices","unicode_words"],"q":[[0,"advent_of_code_rust"],[52,"advent_of_code_rust::router"],[64,"advent_of_code_rust::utils"],[65,"advent_of_code_rust::utils::utils"],[68,"advent_of_code_rust::year_2017"],[69,"advent_of_code_rust::year_2017::day_01"],[72,"advent_of_code_rust::year_2017::day_01::part_one"],[207,"advent_of_code_rust::year_2017::day_01::part_two"],[349,"advent_of_code_rust::year_2017::day_01::utils"]],"d":["Runs the specfied Advent of Code solution","","","","","","","","","","","","","","","","","Day of the solution","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Part of the solution","","","","","","","","","","","","","","","","Year of the Advent of Code solution","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Solves 2017-01 part one.","Solves 20017-01 part two.","Defines utilities shared by both parts of 2017-01 solution.","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","An <code>Iterator</code> blanket implementation that provides extra …","A value of type <code>L</code>.","A value of type <code>R</code>.","","Check whether all elements compare equal.","If there are elements and they are all equal, return a …","Check whether all elements are unique (non equal).","If the iterator yields no elements, Ok(None) will be …","A “meta iterator adaptor”. Its closure receives a …","","","Return an iterator adaptor that iterates over the …","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","Return an iterator adaptor that uses the passed-in closure …","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Returns <code>true</code> if the given item is present in this iterator.","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","If the iterator yields exactly one element, that element …","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","Evaluate the provided expression for both <code>Either::Left</code> and …","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Returns the argument unchanged.","Return an <em>iterable</em> that can group iterator elements. …","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","Calls <code>U::from(self)</code>.","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Combine all iterator elements into one String, separated …","Sort the k smallest elements into a new iterator, in …","Return an iterator adaptor that flattens an iterator of …","Return an iterator adaptor that flattens an iterator of …","Convert each item of the iterator using the <code>Into</code> trait.","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Return all maximum elements of an iterator.","Return all maximum elements of an iterator, as determined …","Return all maximum elements of an iterator, as determined …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Create an iterator that merges items from both this and …","Return all minimum elements of an iterator.","Return all minimum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","Converts an iterator of tuples into a tuple of containers.","Advances the iterator and returns the next items grouped …","Return an iterator adaptor that pads the sequence to a …","","Collect all iterator elements into one of two partitions. …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","“Lift” a function of the values of the current …","Iterate over the entire iterator and multiply all the …","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Return an iterator adaptor that steps <code>n</code> elements in the …","Iterate over the entire iterator and add all the elements.","Finds the sum of all repeated consecutive digits, …","Returns an iterator adaptor that consumes elements while …","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that applies a mutating function","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that combines each element with …","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","A value of type <code>L</code>.","A value of type <code>R</code>.","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","","","","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","Convert the inner value to an iterator.","","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …","Similar to [<code>map_either</code>], with an added context <code>ctx</code> …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","","Finds the sum of the digits halfway around the string …","","","","","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","","Returns the left value","Returns the right value","","","","Methods for segmenting strings according to Unicode …","Creates a vector of integers from a string slice of …","Returns an iterator over the grapheme clusters of <code>self</code> and …","Returns an iterator over the grapheme clusters of <code>self</code>.","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over the words of <code>self</code>, separated on …","Returns an iterator over the words of <code>self</code>, separated on …"],"i":[0,2,2,0,2,3,3,3,2,3,2,2,2,3,2,3,3,3,3,2,3,2,3,2,3,2,3,3,3,3,2,3,2,0,3,3,2,0,2,2,3,2,3,2,3,2,3,3,0,2,3,0,0,17,17,17,0,17,17,17,0,17,17,17,0,0,145,145,0,0,0,0,0,0,20,20,0,146,146,146,146,146,48,48,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,48,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,0,146,146,146,48,146,146,146,146,146,48,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,48,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,48,146,146,146,146,146,146,146,146,146,48,146,146,146,48,146,146,48,48,0,0,146,146,146,48,146,146,146,146,146,146,146,0,20,20,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,114,20,114,20,20,20,20,20,20,20,20,20,114,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,20,114,20,20,20,114,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,114,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,114,20,114,114,20,20,114,20,114,20,0,0,114,20,20,20,20,20,20,0,0,147,147,147,147,147,147,147,147,147],"f":[0,0,0,0,0,[1,1],[1,1],[[]],[[]],[[]],[[]],[2,2],[[]],[[3,3],4],[[2,2],4],[[],1],[[],1],0,[[3,3],5],[[2,2],5],[[],5],[[],5],[[3,6],7],[[2,6],7],[[]],[[]],[8,[[10,[3,9]]]],[8,[[10,[3,9]]]],[[],[[12,[11]]]],[[3,13]],[[2,13]],[[]],[[]],[[]],0,[[3,3],[[12,[4]]]],[[2,2],[[12,[4]]]],0,[[]],[2,[[12,[14]]]],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15],[[3,8],[[10,[9]]]],[[3,8],[[10,[9]]]],0,[[],[[16,[2]]]],0,0,0,[[]],[[]],[[]],[3,[[12,[17]]]],[[]],0,0,[3],[[],10],[[],10],[[],15],0,0,[18],[[],[[20,[19,18]]]],0,0,0,0,0,0,0,0,0,[21,5],[21,[[10,[12]]]],[21,5],[21,[[10,[12,[22,[21]]]]]],[[21,23],[[24,[21,23]]]],[[]],[[]],[[21,25],[[26,[21]]]],[[21,27],[[28,[21]]]],[[[0,[21,29,30,31]]],[[33,[[0,[21,29,30,31]],[0,[32,29]]]]]],[[21,23],[[34,[21,23]]]],[[[0,[21,30]]],[[12,[35]]]],[21,[[37,[36]]]],[[21,27],[[38,[21]]]],[[21,27],[[39,[21]]]],[21],[[21,[40,[[40,[[40,[[40,[40]]]]]]]]],5],[21,[[42,[27,41]]]],[[21,23],[[42,[[0,[43,44]],27,41]]]],[21,[[34,[21,[46,[45]]]]]],[[21,23],[[34,[21,[46,[23]]]]]],[[21,23],[[34,[21,[47,[23]]]]]],[21,[[34,[21,[47,[45]]]]]],[[],48],[[21,27],21],[[[0,[21,49]],27],[[0,[21,49]]]],[21,[[51,[21,50]]]],[[21,23],[[51,[21,[0,[43,44]],[52,[23]]]]]],[21,[[10,[[22,[21]]]]]],[[[0,[30,21]],23],[[53,[[0,[30,21]],23]]]],[[[0,[30,21]],23],[[54,[[0,[30,21]],23]]]],[[21,23],12],[[21,23],12],[23,12],[[[0,[30,21]]],[[55,[[0,[30,21]],25]]]],[[21,23],12],[[30,23],10],[[30,23],12],[[30,23],10],[[21,23],56],0,[[21,23]],[[21,18],[[57,[21]]]],[[21,18,23],[[58,[21,23]]]],[[]],[[21,23],[[59,[[40,[[40,[[40,[40]]]]]],21,23]]]],[[21,25],[[60,[21]]]],[[21,25],[[61,[21]]]],[21,[[63,[21,62]]]],[[21,23],[[63,[21,23]]]],[[]],[[[0,[30,21]]],[[42,[[0,[44,43]],[37,[36]],41]]]],[[[0,[30,21]],64],[[42,[[0,[44,43]],[37,[36]],41]]]],[[[0,[30,21]]],[[65,[[0,[30,21]]]]]],[[[0,[30,21]],23],[[65,[[66,[[0,[30,21]],23]]]]]],[18,67],[[21,27],[[68,[36]]]],[21,[[70,[69]]]],[[21,23],[[70,[23]]]],[21,[[72,[21,71]]]],[[[0,[30,21]],23],[[72,[[0,[30,21]],[73,[23]]]]]],[[[0,[30,21]],23],[[72,[[0,[30,21]],[73,[23]]]]]],[21,[[37,[36]]]],[[21,23],[[37,[36]]]],[[21,23],[[37,[36]]]],[[21,25],[[75,[21,74]]]],[[21,25,23],[[75,[21,23]]]],[[21,25,23],[[76,[21,23]]]],[21,[[37,[36]]]],[[21,23],[[37,[36]]]],[[21,23],[[37,[36]]]],[21,77],[[21,23],77],[[21,23],77],[21,78],[21,[[79,[21]]]],[[[0,[21,80]]]],[[[0,[21,30]]],[[12,[35]]]],[[21,27,23],[[81,[21,23]]]],[[48,18]],[[21,23]],[[[0,[30,21]]]],[[[0,[21,82]],23],[[83,[[0,[21,82]],23]]]],[[21,27],[[84,[21]]]],[21,[[12,[27]]]],[[21,23],[[12,[27]]]],[[21,23],[[12,[27]]]],[21,[[12,[27]]]],[[21,23],[[12,[27]]]],[[21,23],[[12,[27]]]],[21,[[77,[27]]]],[[21,23],[[77,[27]]]],[[21,23],[[77,[27]]]],[[21,23],[[85,[21,23]]]],[21,[[86,[21]]]],[[[0,[30,21]],87],10],[21,[[12,[88]]]],[[30,25],27],[48,[[20,[19,18]]]],[21,[[68,[36]]]],[[21,23],[[68,[36]]]],[[21,23],[[68,[36]]]],[[21,23],[[68,[36]]]],[21,[[68,[36]]]],[[21,23],[[68,[36]]]],[[21,23],[[68,[36]]]],[[21,27],[[89,[21]]]],[21,[[12,[90]]]],[48,19],[[21,23],[[91,[21,23]]]],[[29,23],[[92,[29,23]]]],[21],0,[[21,23],12],[[[0,[21,30]]],10],[[],10],[[],10],0,0,[[[0,[21,29]]],[[94,[[0,[21,29]],[93,[[0,[21,29]]]]]]]],[[[0,[21,30]]],[[95,[[0,[21,30]],35]]]],[[[0,[21,30]]],[[96,[[0,[21,30]],35]]]],[[],15],[21,[[97,[21]]]],[[21,23],[[98,[21,[0,[43,44]],23]]]],[[21,23],[[99,[21,23]]]],[[[0,[21,30]]],[[100,[[0,[21,30]]]]]],[21,[[101,[21]]]],[[21,25],[[102,[21]]]],[[21,25],[[103,[21]]]],0,0,0,0,[[[20,[30,30]],23],5],[[[20,[30,30]],23],5],[20,20],[[[20,[104,104]]]],[[[20,[[104,[18]],[104,[18]]]]],18],[[[20,[[104,[105]],[104,[105]]]]],105],[[[20,[[104,[106]],[104,[106]]]]],106],[[[20,[[104,[107]],[104,[107]]]]],107],[[[20,[[104,[16]],[104,[16]]]]],16],[[[108,[20]]],[[20,[108,108]]]],[[[108,[20]]],[[20,[108,108]]]],[20,20],[[[20,[[109,[105]],[109,[105]]]]],105],[[[20,[[109,[16]],[109,[16]]]]],16],[[[20,[[109,[18]],[109,[18]]]]],18],[[[20,[[109,[106]],[109,[106]]]]],106],[[[20,[[109,[107]],[109,[107]]]]],107],[[[20,[109,109]]]],[[]],[[]],[[]],[[]],[[[20,[110,110]]],[[12,[110]]]],[[[20,[29,29]]],[[20,[29,29]]]],[[[20,[29,29]],[20,[29,29]]]],[[]],[[[20,[111,111]],[20,[111,111]]],4],[[[20,[30,30]]],112],[[[20,[113,113]],27]],[[[20,[30,30]]],27],[[],114],[[[20,[115,115]]]],[[[20,[116,116]]]],[[[20,[110,110]]],18],[[20,87,87]],[[[20,[117,117]]]],[[20,87,87]],[[[20,[[40,[[40,[[40,[40]]]]]],[40,[[40,[[40,[40]]]]]]]],[20,[[40,[[40,[[40,[40]]]]]],[40,[[40,[[40,[40]]]]]]]]],5],[[],5],[[[20,[118]],18]],[[[20,[118]],18]],[[[20,[119,119]],25]],[[[20,[10,10]]],[[10,[20]]]],[20],[[[20,[12,12]]],[[12,[20]]]],[[[20,[10,10]]],[[10,[20]]]],[20],[[[20,[113,113]]],[[10,[[16,[120]],121]]]],[[[20,[30,30]],23],12],[[[20,[30,30]],23],12],[20,20],[[[20,[122,122]]],[[10,[121]]]],[[[20,[118,118]],6],[[10,[123]]]],[[[20,[124,124]],6],[[10,[123]]]],[[[20,[30,30]],23]],0,[[[20,[30,30]],23]],[[]],[[]],[10,20],[[[20,[44,44]],13]],[[]],[20,10],[[]],[[]],[20],[[[20,[25,25]]],20],[[]],[20,5],[20,5],[[[20,[30,30]]],12],[20,12],[[20,87],20],[20],[[[20,[125]]],125],[[20,87]],[[[20,[31,31]]],27],[[20,87],20],[[20,87,87],20],[[20,87,87],20],[[20,87],20],[[20,87],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[20,[30,30]]],12],[[[20,[49,49]]],12],[[[20,[30,30]],27],12],[[114,18]],[[[20,[[126,[[126,[[126,[126]]]]]],[126,[[126,[[126,[126]]]]]]]],[20,[[126,[[126,[[126,[126]]]]]],[126,[[126,[[126,[126]]]]]]]]],[[12,[4]]]],[[[20,[30,30]],23]],[[[108,[[20,[127,127]]]],128],129],[[[20,[30,30]],23],[[12,[27]]]],[130],[[[20,[131,131]],[16,[120]]],[[10,[27,121]]]],[[[20,[131,131]],[16,[120]]],[[10,[121]]]],[[[20,[113,113]],67],[[10,[27,121]]]],[[[20,[131,131]],[37,[120,36]]],[[10,[27,121]]]],[[[20,[131,131]],67],[[10,[27,121]]]],[[[20,[113,113]],120,[37,[120,36]]],[[10,[27,121]]]],[[[20,[49,49]],23],12],[[[20,[49,49]],23]],[20,12],[[20,87],20],[20],[[[20,[125]]],125],[[20,87]],[[[20,[132,132]],133],[[10,[134,121]]]],[[[20,[30,30]]]],[114,[[20,[19,18]]]],[[[20,[110,110]]],[[12,[110]]]],[114,19],0,[[]],[[],67],[[],10],[[],10],[[],10],[[],10],0,0,[[],15],[[],15],[[[20,[118]]]],[[[20,[118]]]],[[[20,[122,122]],[16,[120]]],[[10,[27,121]]]],[[[20,[122,122]],[16,[120]]],[[10,[121]]]],[[[20,[122,122]],135],[[10,[121]]]],0,[18,[[37,[19]]]],[5,136],[5,137],[[],138],[[],139],[[],140],[[],141],[[],142],[[],143],[[],144]],"c":[112,115,118,138,183],"p":[[3,"Command"],[4,"Part"],[3,"Args"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[8,"Hasher"],[3,"PossibleValue"],[3,"TypeId"],[15,"slice"],[3,"DailySolutions"],[15,"str"],[15,"i32"],[4,"Either"],[8,"Sized"],[3,"ExactlyOneError"],[8,"FnMut"],[3,"Batching"],[8,"IntoIterator"],[3,"Product"],[15,"usize"],[3,"IntoChunks"],[8,"Clone"],[8,"Iterator"],[8,"ExactSizeIterator"],[8,"TupleCollect"],[3,"CircularTupleWindows"],[3,"CoalesceBy"],[8,"HomogeneousTuple"],[3,"Global"],[3,"Vec"],[3,"Combinations"],[3,"CombinationsWithReplacement"],[8,"PartialEq"],[3,"RandomState"],[3,"HashMap"],[8,"Eq"],[8,"Hash"],[3,"DedupEq"],[3,"DedupPred2CoalescePred"],[3,"DedupPredWithCount2CoalescePred"],[3,"Soln"],[8,"DoubleEndedIterator"],[3,"ById"],[3,"DuplicatesBy"],[3,"ByFn"],[3,"FilterMapOk"],[3,"FilterOk"],[3,"FlattenOk"],[4,"FoldWhile"],[3,"Format"],[3,"FormatWith"],[3,"GroupBy"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"IntersperseElementSimple"],[3,"IntersperseWith"],[8,"Fn"],[3,"GroupingMap"],[3,"MapForGrouping"],[3,"String"],[3,"IntoIter"],[3,"KMergeByLt"],[3,"KMergeBy"],[3,"MapSpecialCaseFnInto"],[3,"MapSpecialCase"],[3,"MapSpecialCaseFnOk"],[3,"MergeLte"],[3,"MergeBy"],[3,"MergeJoinBy"],[4,"MinMaxResult"],[3,"MultiProduct"],[3,"MultiPeek"],[8,"MultiUnzip"],[3,"PadUsing"],[8,"PeekingNext"],[3,"PeekingTakeWhile"],[3,"Permutations"],[3,"Positions"],[3,"Powerset"],[8,"FnOnce"],[8,"Product"],[3,"Step"],[8,"Sum"],[3,"TakeWhileInclusive"],[3,"TakeWhileRef"],[8,"HasCombination"],[3,"TupleCombinations"],[3,"TupleWindows"],[3,"Tuples"],[3,"Unique"],[3,"UniqueBy"],[3,"Update"],[3,"WhileSome"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[8,"AsMut"],[3,"Path"],[3,"CStr"],[3,"OsStr"],[3,"Pin"],[8,"AsRef"],[8,"Error"],[8,"Ord"],[8,"FromIterator"],[8,"BufRead"],[3,"Soln"],[8,"Deref"],[8,"DerefMut"],[8,"Into"],[8,"Debug"],[8,"Extend"],[15,"u8"],[3,"Error"],[8,"Write"],[3,"Error"],[8,"Display"],[8,"Default"],[8,"PartialOrd"],[8,"Future"],[3,"Context"],[4,"Poll"],[3,"Demand"],[8,"Read"],[8,"Seek"],[4,"SeekFrom"],[15,"u64"],[3,"Arguments"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"USentenceBoundIndices"],[3,"USentenceBounds"],[3,"UWordBoundIndices"],[3,"UWordBounds"],[3,"UnicodeSentences"],[3,"UnicodeWordIndices"],[3,"UnicodeWords"],[8,"Solution"],[8,"Itertools"],[8,"UnicodeSegmentation"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
